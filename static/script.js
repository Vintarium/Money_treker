document.addEventListener('DOMContentLoaded', () => {
    const uploadForm = document.getElementById('uploadForm');
    const fileInput = document.getElementById('fileInput');
    const fileLabel = document.getElementById('fileLabel');
    const submitBtn = document.getElementById('submitBtn');
    const statusMessage = document.getElementById('statusMessage');
    const resultContainer = document.getElementById('resultContainer');

    // –û–±–Ω–æ–≤–ª—è–µ—Ç —Ç–µ–∫—Å—Ç –∫–Ω–æ–ø–∫–∏ –ø—Ä–∏ –≤—ã–±–æ—Ä–µ —Ñ–∞–π–ª–∞
    fileInput.addEventListener('change', () => {
        if (fileInput.files.length > 0) {
            fileLabel.textContent = fileInput.files[0].name;
            submitBtn.disabled = false;
        } else {
            fileLabel.textContent = '–í—ã–±–µ—Ä–∏—Ç–µ —Ñ–∞–π–ª';
            submitBtn.disabled = true;
        }
    });

    // –û–±—Ä–∞–±–æ—Ç–∫–∞ –æ—Ç–ø—Ä–∞–≤–∫–∏ —Ñ–æ—Ä–º—ã
    uploadForm.addEventListener('submit', async (e) => {
        e.preventDefault();

        const file = fileInput.files[0];
        if (!file) {
            statusMessage.textContent = '–ü–æ–∂–∞–ª—É–π—Å—Ç–∞, –≤—ã–±–µ—Ä–∏—Ç–µ —Ñ–∞–π–ª.';
            return;
        }

        const formData = new FormData();
        formData.append('file', file);

        // Display loading status
        statusMessage.textContent = '–û–±—Ä–∞–±–∞—Ç—ã–≤–∞—é —á–µ–∫, –ø–æ–∂–∞–ª—É–π—Å—Ç–∞, –ø–æ–¥–æ–∂–¥–∏—Ç–µ...';
        resultContainer.innerHTML = '';
        submitBtn.disabled = true;

        try {
            const response = await fetch('/api/process-receipt', {
                method: 'POST',
                body: formData,
            });

            const data = await response.json();

            if (data.success) {
                statusMessage.textContent = '‚úÖ –ß–µ–∫ —É—Å–ø–µ—à–Ω–æ –æ–±—Ä–∞–±–æ—Ç–∞–Ω!';
                
                // Clean the string by removing ```json\n and ```
                const rawJsonString = data.data.replace(/```json\n|```/g, '').trim();

                // Parse the cleaned JSON string
                const gptData = JSON.parse(rawJsonString);

                // Display the data in a formatted way
                displayFormattedData(gptData);

            } else {
                statusMessage.textContent = `‚ùå –û—à–∏–±–∫–∞: ${data.error || '–ù–µ–∏–∑–≤–µ—Å—Ç–Ω–∞—è –æ—à–∏–±–∫–∞'}`;
                resultContainer.innerHTML = '';
            }
        } catch (error) {
            statusMessage.textContent = `‚ùå –û—à–∏–±–∫–∞ —Å–µ—Ç–∏: ${error.message}`;
            console.error('Network Error:', error);
        } finally {
            submitBtn.disabled = false;
        }
    });
    
    /**
     * Dynamically creates and displays formatted HTML from JSON data.
     * @param {object} jsonData - The JSON object from GPT.
     */
    function displayFormattedData(jsonData) {
        resultContainer.innerHTML = ''; // Clear previous results

        const date = jsonData.date || '–ù–µ–∏–∑–≤–µ—Å—Ç–Ω–æ';
        const totalAmount = jsonData.total_amount || '–ù–µ–∏–∑–≤–µ—Å—Ç–Ω–æ';

        // Display summary
        const summaryHtml = `
            <h2>üßæ –†–µ–∑—É–ª—å—Ç–∞—Ç—ã –∞–Ω–∞–ª–∏–∑–∞</h2>
            <p><strong>–î–∞—Ç–∞:</strong> ${date}</p>
            <p><strong>–û–±—â–∞—è —Å—É–º–º–∞:</strong> ${totalAmount}</p>
        `;
        resultContainer.innerHTML += summaryHtml;

        // Display items
        if (jsonData.items && jsonData.items.length > 0) {
            const itemsList = document.createElement('ul');
            itemsList.classList.add('items-list');

            jsonData.items.forEach(item => {
                const itemLi = document.createElement('li');
                itemLi.classList.add('item-entry');

                // Create a simple object with the desired keys
                const simpleData = {
                    '–ü–æ–∫—É–ø–∫–∞': item.name || '–ù–µ–∏–∑–≤–µ—Å—Ç–Ω–æ',
                    '–ö–æ–ª–∏—á–µ—Å—Ç–≤–æ': item.quantity || '–ù–µ–∏–∑–≤–µ—Å—Ç–Ω–æ',
                    '–¶–µ–Ω–∞': item.price || '–ù–µ–∏–∑–≤–µ—Å—Ç–Ω–æ',
                    '–ö–∞—Ç–µ–≥–æ—Ä–∏—è': item.category || '–ù–µ–∏–∑–≤–µ—Å—Ç–Ω–æ'
                };

                // Dynamically create HTML from our simple object
                let itemHtml = '';
                for (const key in simpleData) {
                    itemHtml += `<p><strong>${key}:</strong> ${simpleData[key]}</p>`;
                }
                itemLi.innerHTML = itemHtml;
                itemsList.appendChild(itemLi);
            });

            resultContainer.appendChild(itemsList);
        } else {
            resultContainer.innerHTML += '<p>–°–ø–∏—Å–æ–∫ –ø–æ–∫—É–ø–æ–∫ –Ω–µ –Ω–∞–π–¥–µ–Ω.</p>';
        }
    }
});
